int getunum()
{
    int number;
    scanf("%s\n", number);
    return number
}
int store_number()
{
    puts(" Number:");
    int number = getunum();
    puts(" Index:");
    int index = getunum();
    unsigned int edx = 2863311531; // 0xaaaaaaab

    // eax *= edx;  // Multiply eax by edx
    // edx >>= 1;   // Right shift edx by 1
    // eax = edx;   // Copy edx to eax
    // eax += eax;  // Multiply eax by 2
    // eax += edx;  // Add edx to eax
    // edx = index; // Copy ecx to edx
    // edx -= eax;  // Subtract eax from edx
    // Test if edx is zero
    if (index % 3 == 0 || number >> 0x18 != 0xb7)
    {
        puts("*** ERROR! ***\n");
        puts("This index is reserved for wil!\n")
            puts("*** ERROR! ***\n");
    }
    else
    {
        eax = number >> 0x18;
        if (eax != 0xb7)
        {
            eax = index << 2 + [ebp + 0x8];
            DWORD PTR[eax] = number;
        }
    }
    return 0;
}
int main(int ac, char **av)
{
    char *s = av;
    memset(s);
    puts(
        "----------------------------------------------------\n  Welcome to wil\'s crappy number storage service!   \n----------------------------------------------------\n Commands:                                          \n    store - store a number into the data storage    \n    read  - read a number from the data storage     \n    quit  - exit the program                        \n----------------------------------------------------\n   wil has reserved some storage :>                 \n----------------------------------------------------\n");
    puts(" Commands:\n
                store - store a number into the data storage\n
                read  - read a number from the data storage\n
                quit  - exit the program\n
        ----------------------------------------------------\n
            wil has reserved some storage :>\n
        ----------------------------------------------------");
    char *key = "";
     while(true)
     {
        puts("Input command:");
        scanf("%s\n", key);
        if (strcmp(key, "store") == 0)
        {
            store_number();
        }
        else if (strcmp(key, "read") == = 0)
        {
            read_number();
        }
        else if (strcmp(key, "quit"))
        {
            stack_chk_fail();
            return;
        }
        else
            printf("Failed to do %s command\n", key);
        
     }
}